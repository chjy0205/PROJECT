install.packages("InformationValue")
actualValues=community$Median.household.income..dollars.
community=read.csv('https://github.com/chjy0205/data/raw/master/Community%20Reporting%20Areas.csv',stringsAsFactors = F)
actualValues=community$Median.household.income..dollars.
predictedValues=predict(LogitEPI_a, type = 'response')
explanans=names(community)[c(11,15)]
for (x in explanans){
par=cbind(community[,x],community$Median.household.income..dollars.)
p=cor.test(community[,x],community$Median.household.income..dollars.)
print(paste("Pearson:",p$estimate," - Is significative?",p$p.value<0.05))
}
cor(community[explanans])
row.names(community)=community$Community.Reporting.Area.Name
LinRegINCOME=lm(community$Median.household.income..dollars.~ Percent.of.Population.of.Color + Percent.Bachelor.degree.or.higher, data = community)
summary(LinRegINCOME)
actualValues=community$Median.household.income..dollars.
predictedValues=predict(LinRegINCOME, type = 'response')
library(InformationValue)
library(InformationValue)
library("InformationValue", lib.loc="d:/Program Files/R/R-3.4.3/library")
detach("package:InformationValue", unload=TRUE)
library("InformationValue", lib.loc="d:/Program Files/R/R-3.4.3/library")
install.packages("data.table")
actualValues=community$Median.household.income..dollars.
predictedValues=predict(LinRegINCOME, type = 'response')
library(InformationValue)
cm=confusionMatrix(actualValues, predictedValues)
row.names(cm)=c('PredictedNegative','PredictedPositive')
cm
summary(LinRegEPI)$adj.r.squared
summary(LinRegINCOME)$adj.r.squared
summary(LinRegINCOME1)$adj.r.squared
summary(LinRegINCOME)$adj.r.squared
summary(LinRegINCOME2)$adj.r.squared
LinRegINCOME1=lm(community$Median.household.income..dollars.~Percent.of.Population.of.Color, data=community)
summary(LinRegINCOME1)
LinRegINCOME2=lm(community$Median.household.income..dollars.~Percent.Bachelor.degree.or.higher, data=community)
summary(LinRegINCOME2)
LinRegINCOME3=lm(community$Percent.Bachelor.degree.or.higher~Percent.of.Population.of.Color, data=community)
summary(LinRegINCOME3)
summary(LinRegINCOME)$adj.r.squared
summary(LinRegINCOME1)$adj.r.squared
summary(LinRegINCOME2)$adj.r.squared
summary(LinRegINCOME3)$adj.r.squared
plot(incoClus,cex=0.3)
length(community$Community.Reporting.Area.Name)==length(unique(community$Community.Reporting.Area.Name))
row.names(community)=community$Community.Reporting.Area.Name
str(community[,c(11,15,21)])
library(cluster)
incoSimi=daisy(community[,c(11,15,21)],metric = "euclidean",
stand=TRUE)
incoClus=hclust(incoSimi,method = 'average')
plot(incoClus,cex=0.5)
plot(incoClus,cex=0.3)
rect.hclust(demoClus, k = 3,border = c('orange','blue','red'))
plot(incoClus,cex=0.3)
rect.hclust(incoClus, k = 3,border = c('orange','blue','red'))
plot(incoClus,cex=0.3)
rect.hclust(incoClus, k = 4,border = c('orange','blue','red','green'))
demsil4=silhouette(cutree(incoClus, k = 4), demoSimi)
length(community$Community.Reporting.Area.Name)=length(unique(community$Community.Reporting.Area.Name))
row.names(community)=community$Community.Reporting.Area.Name
str(community[,c(11,15,21)])
library(cluster)
incoSimi=daisy(community[,c(11,15,21)],metric="euclidean",
stand=TRUE))
length(community$Community.Reporting.Area.Name)=length(unique(community$Community.Reporting.Area.Name))
row.names(community)=community$Community.Reporting.Area.Name
str(community[,c(11,15,21)])
library(cluster)
incoSimi=daisy(community[,c(11,15,21)],metric="euclidean",
stand=TRUE)
demsil4=silhouette(cutree(incoClus, k = 4), demoSimi)
length(community$Community.Reporting.Area.Name)=length(unique(community$Community.Reporting.Area.Name))
row.names(community)=community$Community.Reporting.Area.Name
str(community[,c(11,15,21)])
library(cluster)
incoSimi=daisy(community[,c(11,15,21)],metric="euclidean",
stand=TRUE)
demsil4=silhouette(cutree(incoClus, k = 4), incoSimi)
clust4solution=data.frame(matrix(demsil4,ncol = 3,dimnames =dimnames(demsil4)))
row.names(clust4solution)=community$Community.Reporting.Area.Name
(bad4=clust4solution[clust4solution$sil_width<0,])
demsil3=silhouette(cutree(incoClus, k = 3), incoSimi)
clust3solution=data.frame(matrix(demsil4,ncol = 3,dimnames =dimnames(demsil3)))
row.names(clust4solution)=community$Community.Reporting.Area.Name
(bad3=clust4solution[clust4solution$sil_width<0,])
intersect(row.names(bad4),row.names(bad3))
